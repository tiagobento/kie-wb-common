#
# Copyright 2017 Red Hat, Inc. and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
ExpressionEditor.ReturnToDRG=Back to "{0}"
ExpressionEditor.UndefinedExpressionType=Undefined
ExpressionEditor.LiteralExpressionType=Literal expression
ExpressionEditor.ContextExpressionType=Context
ExpressionEditor.DecisionTableExpressionType=Decision Table
ExpressionEditor.RelationType=Relation
ExpressionEditor.FunctionType=Function
ExpressionEditor.PMMLFunctionType=PMML Function
ExpressionEditor.JavaFunctionType=Java Function
ExpressionEditor.InvocationType=Invocation
ExpressionEditor.Clear=Clear
LiteralExpression.EditExpression=Edit Expression
ContextEditor.InsertContextEntryAbove=Insert row above
ContextEditor.InsertContextEntryBelow=Insert row below
ContextEditor.DeleteContextEntry=Delete row
ContextEditor.EditExpression=Edit Expression
ContextEditor.EditContextEntry=Edit Context Entry
RelationEditor.InsertRowAbove=Insert row above
RelationEditor.InsertRowBelow=Insert row below
RelationEditor.DeleteRow=Delete row
RelationEditor.InsertColumnLeft=Insert column left
RelationEditor.InsertColumnRight=Insert column right
RelationEditor.DeleteColumn=Delete column
RelationEditor.EditRelation=Edit Relation
InvocationEditor.InsertParameterAbove=Insert Parameter above
InvocationEditor.InsertParameterBelow=Insert Parameter below
InvocationEditor.DeleteParameter=Delete Parameter
InvocationEditor.EditExpression=Edit Expression
InvocationEditor.EditParameter=Edit Parameter
InvocationEditor.EnterFunction=Enter function
FunctionEditor.FEEL=FEEL
FunctionEditor.JAVA=JAVA
FunctionEditor.PMML=PMML
FunctionEditor.Undefined=<Undefined>
FunctionEditor.EditExpression=Edit Expression
FunctionEditor.EditParameters=Edit parameters
FunctionEditor.EditParametersTitle=Edit Parameters
FunctionEditor.SelectFunctionKind=Select Function Kind
ParametersPopoverViewImpl.addParameter=Add parameter
DecisionTableEditor.DescriptionColumnHeader=Description
DecisionTableEditor.OutputClauseHeader=Output clause
DecisionTableEditor.InsertInputClauseLeft=Insert Input Clause left
DecisionTableEditor.InsertInputClauseRight=Insert Input Clause right
DecisionTableEditor.DeleteInputClause=Delete Input Clause
DecisionTableEditor.InsertOutputClauseLeft=Insert Output Clause left
DecisionTableEditor.InsertOutputClauseRight=Insert Output Clause right
DecisionTableEditor.DeleteOutputClause=Delete Output Clause
DecisionTableEditor.InsertDecisionRuleAbove=Insert rule above
DecisionTableEditor.InsertDecisionRuleBelow=Insert rule below
DecisionTableEditor.DeleteDecisionRule=Delete rule
DecisionTableEditor.NullBuiltinAggregator=<None>
DecisionTableEditor.EditHitPolicy=Edit Hit Policy
DecisionTableEditor.EditInputClause=Edit Input Clause
DecisionTableEditor.EditOutputClause=Edit Output Clause
DecisionTableEditor.HitPolicyLabel=Hit Policy
DecisionTableEditor.BuiltinAggregatorLabel=Builtin Aggregator
UndefinedExpressionEditor.SelectorTitle=Select logic type
UndefinedExpressionEditor.SelectExpression=Select expression
DecisionNavigatorPresenter.DecisionNavigator=Decision Navigator
DecisionNavigatorBaseItemFactory.NoName=- No Name -
TypePickerWidget.Choose=Choose...
TypePickerWidget.Manage=Manage
DataTypeManager.None=Insert a name
DataTypeManager.Structure=Structure
DataTypeModalView.Header=Manage Custom Data Types
DataTypeModalView.Cancel=Cancel
DataTypeModalView.Save=Save
DataTypeSelectView.DefaultTitle=Default
DataTypeSelectView.CustomTitle=Custom
DataTypeTreeGridView.AttributeName=Attribute Name
DataTypeTreeGridView.Type=Type
DataTypeTreeGridView.Required=(* Required)
DataTypeListItemView.Edit=Edit
DataTypeListItemView.Save=Save
DataTypeListItemView.Remove=Remove
DataTypeListItemView.InsertFieldAbove=Insert field above
DataTypeListItemView.InsertFieldBelow=Insert field below
DataTypeListItemView.InsertNestedField=Insert nested field
DataTypeListItemView.MoveUp=Move up
DataTypeListItemView.MoveDown=Move down
DataTypeListItemView.Name=Name
DataTypeListItemView.Type=Type
DataTypeListItemView.ArrowKeysTooltip=Use arrow keys to navigate through Data Types
DataTypeListView.Title=Custom Data Types
DataTypeListView.CollapsedText=Data types determine the structure of the data used in DMN boxed expressions. You can use basic data types (example, Boolean) or you can use this dialog to create custom data types.
DataTypeListView.ViewMore=View more
DataTypeListView.ViewLess=View less
DataTypeListView.NoCustomDataTitle=No custom data types have been defined.
DataTypeListView.NoCustomData1=There are currently no custom data types available for you to
DataTypeListView.NoCustomData2=view or edit. To get started, add a custom data type.
DataTypeListView.NoCustomDataTypesFound1=No custom Data Types found.
DataTypeListView.NoCustomDataTypesFound2=Try a different Data Type name.
DataTypeListView.Add=Add
DataTypeListView.ExpandedText1=Data types determine the structure of the data used in DMN boxed expressions. You can use basic data types (example, Boolean) or you can use this dialog to create custom data types.
DataTypeListView.ExpandedText2=Custom data types that you create in this dialog can be Simple or Structured data types:
DataTypeListView.ExpandedText3=data types have only a name and a type assignment. Example: "Age (Number)"
DataTypeListView.ExpandedText4=data types contain fields and are more complex. A single type "Person" may define a number of fields within it. Example: "name (String), age (Number), email (String)."
DataTypeListView.Simple=Simple
DataTypeListView.Structured=Structured
DataTypeListView.ExpandAll=Expand all
DataTypeListView.CollapseAll=Collapse all
NameAndDataTypePopover.NameLabel=Name
NameAndDataTypePopover.DataTypeLabel=Data Type
NameIsBlankErrorMessage.StrongMessage=The Data Type name cannot be blank.
NameIsBlankErrorMessage.RegularMessage=Enter a Data Type name.
NameIsInvalidErrorMessage.StrongMessage=The Data Type name must start with a letter, ?, or _ and cannot start with a language keyword, such as and, true, or every.
NameIsInvalidErrorMessage.RegularMessage=Use a different Data Type name.
NameIsNotUniqueErrorMessage.StrongMessage=A Data Type "{0}" already exists.
NameIsNotUniqueErrorMessage.RegularMessage=Use a different Data Type name.
DataTypeWithFieldsWarningMessage.StrongMessage=All fields that are part of this structure will be removed as a result of this change.
DataTypeWithFieldsWarningMessage.RegularMessage=Are you sure you want to change this Data Type?
ReferencedDataTypeWarningMessage.StrongMessage=All Data Types with the "{0}" type will be removed.
ReferencedDataTypeWarningMessage.RegularMessage=Are you sure you want to remove this Data Type?
NameIsDefaultTypeMessage.StrongMessage=The Data Type name cannot be a default type.
NameIsDefaultTypeMessage.RegularMessage=Use a different Data Type name.
DataTypeFlashMessagesView.Ok=OK
DataTypeFlashMessagesView.Cancel=Cancel
DataTypeListItemView.Constraints=Constraints: {0}
DataTypeListItemView.List=List
DataTypeListItemView.Yes=Yes
SmallSwitchComponentView.Yes=Yes
SmallSwitchComponentView.No=No
DataTypesPage.Label=Data Types
DataTypeSearchBarView.Search=Search...
DataTypeConstraintView.Constraints=Constraints
DataTypeConstraintView.ConstraintsTooltip=Add constraints to limit and define valid input for the data type
DataTypeConstraintModalView.BodyParagraph1=Add constraints to limit and define valid input for the 
DataTypeConstraintModalView.BodyParagraph2=data type.
DataTypeConstraintModalView.BodyParagraph3=Select constraint type
DataTypeConstraintModalView.Header=Data Type constraints
DataTypeConstraintModalView.Select=Select
DataTypeConstraintModalView.Enumeration=Enumeration
DataTypeConstraintModalView.Expression=Expression
DataTypeConstraintModalView.Range=Range
DataTypeConstraintModalView.ClearAll=Clear all
DataTypeConstraintModalView.Ok=OK
DataTypeConstraintModalView.Cancel=Cancel
DataTypeConstraintModalView.SelectConstraintType=Select a constraint type
DataTypeConstraintExpressionView.ProTip=Syntax tips: Dates can be expressed using a string literal and the date() built-in function. A date in the semantic domain is a sequence of numbers for the year, month, day of month. The year must be in the range [-999,999,999..999,999,999]. Where necessary, including the valuedt function, a date value is considered to be equivalent to a date time value in which the time of day is UTC midnight (00:00:00).
DataTypeConstraintExpressionView.Placeholder=Enter a valid expression
