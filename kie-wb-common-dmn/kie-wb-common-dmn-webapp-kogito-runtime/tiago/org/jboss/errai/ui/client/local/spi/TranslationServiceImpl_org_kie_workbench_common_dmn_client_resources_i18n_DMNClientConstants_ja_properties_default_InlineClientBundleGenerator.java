package org.jboss.errai.ui.client.local.spi;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ResourcePrototype;

public class TranslationServiceImpl_org_kie_workbench_common_dmn_client_resources_i18n_DMNClientConstants_ja_properties_default_InlineClientBundleGenerator implements org.jboss.errai.ui.client.local.spi.TranslationServiceImpl.org_kie_workbench_common_dmn_client_resources_i18n_DMNClientConstants_ja_properties {
  private static TranslationServiceImpl_org_kie_workbench_common_dmn_client_resources_i18n_DMNClientConstants_ja_properties_default_InlineClientBundleGenerator _instance0 = new TranslationServiceImpl_org_kie_workbench_common_dmn_client_resources_i18n_DMNClientConstants_ja_properties_default_InlineClientBundleGenerator();
  private void getContentsInitializer() {
    getContents = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/tiagobento/.m2/repository/org/kie/workbench/kie-wb-common-dmn-client/7.47.0-SNAPSHOT/kie-wb-common-dmn-client-7.47.0-SNAPSHOT.jar!/org/kie/workbench/common/dmn/client/resources/i18n/DMNClientConstants_ja.properties
      public String getText() {
        return "#\n# Copyright 2017 Red Hat, Inc. and/or its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nExpressionEditor.ReturnToLink={0} に戻る\nExpressionEditor.ExpressionTypeText=({0})\nExpressionEditor.UndefinedExpressionType=未定義\nExpressionEditor.LiteralExpressionType=文字式\nExpressionEditor.ContextExpressionType=コンテキスト\nExpressionEditor.DecisionTableExpressionType=デシジョンテーブル\nExpressionEditor.RelationType=関連\nExpressionEditor.FunctionType=関数\nExpressionEditor.PMMLFunctionType=PMML 関数\nExpressionEditor.JavaFunctionType=Java 関数\nExpressionEditor.InvocationType=呼び出し\nExpressionEditor.Clear=消去\nLiteralExpression.EditExpression=式の編集\nContextEditor.Header=コンテキストエントリー\nContextEditor.InsertContextEntry=挿入\nContextEditor.InsertContextEntryAbove=上に挿入\nContextEditor.InsertContextEntryBelow=下に挿入\nContextEditor.DeleteContextEntry=削除\nContextEditor.EditExpression=式の編集\nContextEditor.EditContextEntry=コンテキストエントリーの編集\nRelationEditor.HeaderRows=行\nRelationEditor.InsertRowAbove=上に挿入\nRelationEditor.InsertRowBelow=下に挿入\nRelationEditor.DeleteRow=削除\nRelationEditor.HeaderColumns=列\nRelationEditor.InsertColumnLeft=左に挿入\nRelationEditor.InsertColumnRight=右に挿入\nRelationEditor.DeleteColumn=削除\nRelationEditor.EditRelation=関連の編集\nInvocationEditor.Header=パラメーター\nInvocationEditor.InsertParameter=挿入\nInvocationEditor.InsertParameterAbove=上に挿入\nInvocationEditor.InsertParameterBelow=下に挿入\nInvocationEditor.DeleteParameter=削除\nInvocationEditor.EditExpression=式の編集\nInvocationEditor.EditParameter=パラメーターの編集\nInvocationEditor.EnterFunction=関数を入力\nFunctionEditor.FEEL=FEEL\nFunctionEditor.JAVA=JAVA\nFunctionEditor.PMML=PMML\nFunctionEditor.Undefined=<Undefined>\nFunctionEditor.EditExpression=式の編集\nFunctionEditor.EditParameters=パラメーターの編集\nFunctionEditor.EditParametersTitle=パラメーターの編集\nFunctionEditor.SelectFunctionKind=関数の種類を選択\nParametersPopoverViewImpl.addParameter=パラメーターの追加\nDecisionTableEditor.DescriptionColumnHeader=説明\nDecisionTableEditor.InputClauseHeader=Input 句\nDecisionTableEditor.InsertInputClauseLeft=左に挿入\nDecisionTableEditor.InsertInputClauseRight=右に挿入\nDecisionTableEditor.DeleteInputClause=削除\nDecisionTableEditor.OutputClauseHeader=Output 句\nDecisionTableEditor.InsertOutputClauseLeft=左に挿入\nDecisionTableEditor.InsertOutputClauseRight=右に挿入\nDecisionTableEditor.DeleteOutputClause=削除\nDecisionTableEditor.DecisionRuleHeader=デシジョンルール\nDecisionTableEditor.InsertDecisionRuleAbove=上に挿入\nDecisionTableEditor.InsertDecisionRuleBelow=下に挿入\nDecisionTableEditor.DeleteDecisionRule=削除\nDecisionTableEditor.DuplicateDecisionRule=複製\nDecisionTableEditor.NullBuiltinAggregator=<None>\nDecisionTableEditor.EditHitPolicy=ヒットポリシーの編集\nDecisionTableEditor.EditInputClause=Input 句の編集\nDecisionTableEditor.EditOutputClause=Output 句の編集\nDecisionTableEditor.HitPolicyLabel=ヒットポリシー\nDecisionTableEditor.BuiltinAggregatorLabel=ビルドインアグリゲーター\nUndefinedExpressionEditor.SelectorTitle=論理タイプの選択\nUndefinedExpressionEditor.SelectExpression=式の選択\nDecisionNavigatorPresenter.DecisionNavigator=Decision Navigator\nDecisionNavigatorBaseItemFactory.NoName=- 名前なし -\nTypePickerWidget.Choose=選択…\nTypePickerWidget.Manage=管理\nDataTypeManager.None=名前を挿入\nDataTypeManager.Structure=Structure\nDataTypeModalView.Header=カスタムデータタイプの管理\nDataTypeModalView.Cancel=キャンセル\nDataTypeModalView.Save=保存\nDataTypeSelectView.DefaultTitle=デフォルト\nDataTypeSelectView.CustomTitle=Custom\nDataTypeTreeGridView.AttributeName=属性名\nDataTypeTreeGridView.Type=タイプ\nDataTypeTreeGridView.Required=(* 必須)\nDataTypeListItemView.Name=Name\nDataTypeListItemView.Type=タイプ\nDataTypeListItemView.ArrowKeysTooltip=矢印を使ってデータタイプに移動します\nDataTypeListView.Title=カスタムデータタイプ\nDataTypeListView.CollapsedText=データタイプは、DMN のボックス式で使用されるデータの構造を決定します。基本的なデータタイプ (Boolean タイプなど) を使用するか、このダイアログを使用してカスタムデータタイプを作成できます。\nDataTypeListView.ViewMore=詳細表示\nDataTypeListView.ViewLess=簡易表示\nDataTypeListView.NoCustomDataTitle=定義されたカスタムデータタイプはありません。\nDataTypeListView.NoCustomData1=表示または編集可能なカスタムデータタイプはありません。\nDataTypeListView.NoCustomData2=表示または編集します。開始するには、カスタムデータタイプを追加してください。\nDataTypeListView.NoCustomDataTypesFound1=カスタムデータタイプが見つかりませんでした。\nDataTypeListView.NoCustomDataTypesFound2=別のデータタイプの名前を試してください。\nDataTypeListView.Add=追加\nDataTypeListView.ExpandedText1=データタイプは、DMN のボックス式で使用されるデータの構造を決定します。基本的なデータタイプ (Boolean タイプなど) を使用するか、このダイアログを使用してカスタムデータタイプを作成できます。\nDataTypeListView.ExpandedText2=このダイアログで作成できるカスタムデータタイプは、Simple または Structured です。\nDataTypeListView.ExpandedText3=データタイプには、名前とタイプだけが割り当てられています。例:\"年齢 (数字)\"\nDataTypeListView.ExpandedText4=データタイプにはフィールドが含まれ、より複雑です。単一のタイプの \"Person\" は、その中にいくつかのフィールドを定義できます。例: \"名前 (文字)、年齢 (数字)、電子メール (文字)。\"\nDataTypeListView.Simple=単純\nDataTypeListView.Structured=Structured\nDataTypeListView.ExpandAll=すべてを展開\nDataTypeListView.CollapseAll=すべてを折りたたむ\nDataTypeListView.ReadOnlyMessage1=このリストには読み取り専用モードのデータタイプが含まれています。\nDataTypeListView.ReadOnlyMessage2=元のファイルを開いて編集できます。\nDataTypeListView.ImportDataObject=データオブジェクトのインポート\nNameAndDataTypePopover.NameLabel=Name\nNameAndDataTypePopover.DataTypeLabel=データタイプ\nDataTypeNameIsBlankErrorMessage.StrongMessage=データタイプの名前は空白にできません。\nDataTypeNameIsBlankErrorMessage.RegularMessage=データタイプの名前を入力してください。\nDataTypeNameIsInvalidErrorMessage.StrongMessage=データタイプの名前は、文字、クエスチョンマーク「?」またはアンダースコア「_」 で始める必要があり、「and」や「true」または「every」といった言語のキーワードで始めることはできません。\nDataTypeNameIsInvalidErrorMessage.RegularMessage=別のデータタイプの名前を使用してください。\nDataTypeNameIsNotUniqueErrorMessage.StrongMessage=データタイプ \"{0}\" はすでに存在しています。\nDataTypeNameIsNotUniqueErrorMessage.RegularMessage=別のデータタイプの名前を使用してください。\nDataTypeWithFieldsWarningMessage.StrongMessage=この変更により、この構造の一部であるフィールドはすべて削除されます。\nDataTypeWithFieldsWarningMessage.RegularMessage=このデータタイプを変更してもよろしいですか?\nReferencedDataTypeWarningMessage.StrongMessage=\"{0}\" タイプのデータタイプはすべて削除されます。\nReferencedDataTypeWarningMessage.RegularMessage=このデータタイプを削除してもよろしいですか?\nDataTypeNameIsDefaultTypeMessage.StrongMessage=データタイプの名前はデフォルトタイプにできません。\nDataTypeNameIsDefaultTypeMessage.RegularMessage=別のデータタイプの名前を使用してください。\nDataTypeSuccessfullyImportedMessage.RegularMessage=データオブジェクト (Java クラス) は DMN データタイプに正常に変換され、インポートされました。\nFlashMessagesView.Ok=OK\nFlashMessagesView.Cancel=キャンセル\nDataTypeListItemView.Constraints=制約: {0}\nDataTypeListItemView.List=リスト\nDataTypeListItemView.Yes=はい\nDataTypesPage.Title=データタイプ\nIncludedModelsPage.Title=含まれるモデル\nDataTypeSearchBarView.Search=名前での絞り込み\nDataTypeConstraintView.AddConstraints=制約を追加\nDataTypeConstraintView.ConstraintsTooltip=データタイプに有効な入力を制限し、定義するための制約を追加します。\nDataTypeConstraintModalView.BodyParagraph1=このデータタイプに有効な入力を制限し、定義するための \nDataTypeConstraintModalView.BodyParagraph2=データタイプ。\nDataTypeConstraintModalView.BodyParagraph3=制約タイプを選択\nDataTypeConstraintModalView.Header=データタイプの制約\nDataTypeConstraintModalView.Select=選択\nDataTypeConstraintModalView.Enumeration=列挙\nDataTypeConstraintModalView.Expression=式\nDataTypeConstraintModalView.Range=範囲\nDataTypeConstraintModalView.ClearAll=すべて消去\nDataTypeConstraintModalView.Ok=OK\nDataTypeConstraintModalView.Cancel=キャンセル\nDataTypeConstraintModalView.SelectConstraintType=制約タイプを選択\nDataTypeConstraintExpressionView.ForSyntaxRequirements=制限式の構文要件については、以下を参照してください。\nDataTypeConstraintExpressionView.DMNSpecification=DMN 仕様\nDataTypeConstraintExpressionView.Placeholder=有効な式を入力\nDataTypeConstraintEnumerationView.Add=追加\nDataTypeConstraintEnumerationItemView.Edit=編集\nDataTypeConstraintEnumerationItemView.Remove=削除\nDataTypeConstraintEnumerationItemView.MoveUp=上に移動\nDataTypeConstraintEnumerationItemView.MoveDown=下に移動\nDataTypeConstraintEnumerationItemView.None=- なし -\nDataTypeConstraintModalView.StrongWarningParserMessage=現在の制約は解析できませんでした。\nDataTypeConstraintModalView.RegularWarningParserMessage=有効な制約を設定します。\nDataTypeConstraintRangeView.StartValue=開始値\nDataTypeConstraintRangeView.EndValue=終了値\nDataTypeConstraintRangeView.IncludeStartValue=開始値を含める\nDataTypeConstraintRangeView.IncludeEndValue=終了値を含める\nDataTypeConstraintRangeView.RequiredValue=* 範囲には開始値と終了値があり、両方のフィールドの値が必要です。\nDataTypeConstraintRangeView.ProTip=範囲の両端の値は、範囲の定義に含むことも、除外することもできます。チェックボックスがオフの場合、開始値または終了値は除外されます。\nConstraintPlaceholderHelper.SentenceDate=\"date\" データタイプの式の例: (date(\"2019-02-01\")..date(\"2019-02-28\"))\nConstraintPlaceholderHelper.SentenceNumber=\"number\" データタイプの式の例:(1..10)\nConstraintPlaceholderHelper.SentenceString=\"string\" データタイプの式の例: \"apple\",\"orange\",\"pineapple\"\nConstraintPlaceholderHelper.SentenceDayTimeDuration=\"days and time duration\" データタイプの式の例 (PT10S は 10 秒を表し、PT30M は 30 分を表します): (duration(\"PT10S\")..duration(\"PT30M\"))\nConstraintPlaceholderHelper.SentenceYearMonthDuration=\"years and months duration\" データタイプの式の例 (P2M は 2 カ月を表し、P2Y は 2 年 を表します): (duration(\"P2M\")..duration(\"P2Y\"))\nConstraintPlaceholderHelper.SentenceTime=\"time\" データタイプの式の例: (time(\"16:00\")..time(\"16:30\"))\nConstraintPlaceholderHelper.SentenceDateTime=\"date and time\" データタイプの式の例: (date and time(\"2019-02-01T16:00\")..date and time(\"2019-02-28T17:00\"))\nConstraintPlaceholderHelper.SentenceDefault=有効な式を入力\nConstraintPlaceholderHelper.SampleDate=日付けの選択\nConstraintPlaceholderHelper.SampleNumber=数字を入力\nConstraintPlaceholderHelper.SampleString=文字列を入力\nConstraintPlaceholderHelper.SampleDayTimeDuration=期間(\"PT10S\")\nConstraintPlaceholderHelper.SampleYearMonthDuration=値を入力\nConstraintPlaceholderHelper.SampleTime=時間を入力\nConstraintPlaceholderHelper.SampleDateTime=時間(\"2019-02-28T17:00\")\nConstraintPlaceholderHelper.SampleDefault=値を入力する\nIncludedModelsPageView.Title=含まれるモデル\nIncludedModelsPageView.Description=含まれるモデルは、この DMN ファイルに追加された外部定義モデルです。外部 DMN モデルには、この DMN ファイルで利用できるデシジョン要件ダイアグラムまたはグラフコンポーネントがあります。外部 PMML モデルは、DMN 関数を介して呼び出すことができます。\nIncludedModelsPageView.IncludeModel=モデルを追加\nDMNCardComponentContentView.Remove=削除\nPMMLCardComponentContentView.Remove=削除\nDefaultCardComponentContentView.Remove=削除\nIncludedModelNameIsNotUniqueErrorMessage.StrongMessage=モデル \"{0}\" はすでに存在します。\nIncludedModelNameIsNotUniqueErrorMessage.RegularMessage=別のモデル名を使用してください。\nIncludedModelNameIsBlankErrorMessage.StrongMessage=モデル名は空白にできません。\nIncludedModelNameIsBlankErrorMessage.RegularMessage=モデル名を入力してください\nDMNCardsEmptyStateView.Title=外部 DMN モデルは含まれていません。\nDMNCardsEmptyStateView.Subtitle=外部モデルをこの DMN ファイルに追加するには、Include Model をクリックします。\nYearsMonthsSelectorView.Months=月\nYearsMonthsSelectorView.Years=年\nYearsMonthsSelectorView.MonthsAbbreviated=月\nYearsMonthsSelectorView.YearsAbbreviated=年\nDayTimeValueConverter.Days=日\nDayTimeValueConverter.Hours=時間\nDayTimeValueConverter.Minutes=分\nDayTimeValueConverter.Seconds=秒\nDayTimeValueConverter.Day=日\nDayTimeValueConverter.Hour=時間\nDayTimeValueConverter.Minute=分\nDayTimeValueConverter.Second=秒\nDayTimeSelectorView.Days=日\nDayTimeSelectorView.Hours=時間\nDayTimeSelectorView.Minutes=分\nDayTimeSelectorView.Seconds=秒\nTimeSelectorView.None=なし\nTimeSelectorView.SelectTimeZone=タイムゾーンの選択\nTimeSelectorView.SelectUTCOffset=UTC オフセットの選択\nIncludedModelModalView.Header=モデルを追加\nIncludedModelModalView.Description=プロジェクトディレクトリーに追加されたモデルは、この DMN ファイルに含まれている場合があります。含まれている DMN モデルのデシジョン要件ダイアグラムコンポーネントは、この DMN ファイルで利用可能となります。PMML モデルは、DMN 関数を介して呼び出すことができます。\nIncludedModelModalView.DMNModelsLabel=モデル\nIncludedModelModalView.UniqueNameLabel=一意名を指定\nIncludedModelModalView.Include=含める\nIncludedModelModalView.Cancel=キャンセル\nDecisionComponentsView.FilterBy=フィルター条件\nDecisionComponentsView.Decision=デシジョン\nDecisionComponentsView.BusinessKnowledgeModel=ビジネスナレッジモデル\nDecisionComponentsView.InputData=入力データ\nDecisionComponentsView.DecisionService=デシジョンサービス\nDecisionComponentsView.KnowledgeSource=ナレッジソース\nDecisionComponentsView.AllIncludedComponents=含まれているコンポーネントすべて\nDecisionComponentsView.EnterText=テキストの入力\nDecisionComponentsView.EmptyStateTitle=外部 DMN モデルは含まれていません。\nDecisionComponentsView.EmptyStateDescription=この DMN ファイルに外部モデルを追加するには、「Include Models」タブに移動して、モデルを追加します。\nDecisionNavigatorView.DecisionGraphs=デシジョングラフ\nDecisionNavigatorView.DecisionComponents=デシジョンコンポーネント\nDecisionComponentsItemView.DuplicatedNode=外部コンポーネントがすでに DMN ファイルに存在しており、再度追加できません。\nLiteralExpressionPMMLDocumentEditorDefinition.Placeholder=まず PMML ドキュメントを選択します\nLiteralExpressionPMMLDocumentModelEditorDefinition.Placeholder=2 番目に PMML モデルを選択します\nDMNDocumentationI18n.DmnModelDocumentation=DMN モデルのドキュメント\nDMNDocumentationI18n.GeneratedOn=生成日:\nDMNDocumentationI18n.GeneratedBy=生成者:\nDMNDocumentationI18n.GeneratedFrom=生成元:\nDMNDocumentationI18n.Namespace=名前空間:\nDMNDocumentationI18n.TableOfContents=目次\nDMNDocumentationI18n.DmnModel=DMN モデル\nDMNDocumentationI18n.DataTypes=データタイプ\nDMNDocumentationI18n.DrdComponents=DRD コンポーネント\nDMNDocumentationI18n.NoDataTypes=データタイプがありません。\nDMNDocumentationI18n.NoExternalLinks=関連リンクがありません。\nDMNDocumentationI18n.ExternalLinks=関連リンク:\nDMNDocumentationI18n.NoDRDs=DRD コンポーネントがありません。\nDMNDocumentationI18n.DiagramDoesNotHaveElements=ダイアグラムには要素がありません。\nDMNDocumentationI18n.Add=追加\nDMNDocumentationI18n.None=なし\nDMNDocumentationI18n.Name=名前の添付\nDMNDocumentationI18n.URL=URL\nDMNDocumentationI18n.NamePlaceholder=入力\nDMNDocumentationI18n.URLPlaceholder=https://\nDMNDocumentationI18n.Ok=OK\nDMNDocumentationI18n.Cancel=キャンセル\nDMNDocumentationI18n.AttachmentTip=.pdf。.doc、.jpeg、.xls\nDMNDocumentationFactory.Constraints=制約:\nDMNDocumentationFactory.ListYes=リスト:はい\nDMNDocumentationFactory.Structure=Structure\nDMNDocumentationView.Print=印刷\nDMNPreviewDiagramDock.Title=プレビュー\nDMNDocumentationView.DownloadHtmlFile=.HTML ファイルのダウンロード\nImportDataObjectModalView.Header=データオブジェクトのインポート\nImportDataObjectModalView.Note=注記:\nImportDataObjectModalView.NoteText=このアクションは 1 回限りのインポートです。データオブジェクトが更新された場合、変更をそれぞれのデータタイプに反映させるために再インポートする必要があります。\nImportDataObjectModalView.Cancel=キャンセル\nImportDataObjectModalView.Import=インポート\nImportDataObjectModalView.ClearSelection=選択のクリア\nImportDataObjectModalView.ProjectDataObjects=プロジェクトデータオブジェクト\nImportDataObjectModalView.DataTypeWithSameNameFound=同じ名前の DMN データタイプがすでに存在します。続行すると、上書きされます。\n\n";
      }
      public String getName() {
        return "getContents";
      }
    }
    ;
  }
  private static class getContentsInitializer {
    static {
      _instance0.getContentsInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return getContents;
    }
  }
  public com.google.gwt.resources.client.TextResource getContents() {
    return getContentsInitializer.get();
  }
  private static java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype> resourceMap;
  private static com.google.gwt.resources.client.TextResource getContents;
  
  public ResourcePrototype[] getResources() {
    return new ResourcePrototype[] {
      getContents(), 
    };
  }
  public ResourcePrototype getResource(String name) {
    if (GWT.isScript()) {
      return getResourceNative(name);
    } else {
      if (resourceMap == null) {
        resourceMap = new java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype>();
        resourceMap.put("getContents", getContents());
      }
      return resourceMap.get(name);
    }
  }
  private native ResourcePrototype getResourceNative(String name) /*-{
    switch (name) {
      case 'getContents': return this.@org.jboss.errai.ui.client.local.spi.TranslationServiceImpl.org_kie_workbench_common_dmn_client_resources_i18n_DMNClientConstants_ja_properties::getContents()();
    }
    return null;
  }-*/;
}
